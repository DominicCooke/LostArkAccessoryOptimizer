/*
 * This file has been Auto Generated, Please do not edit.
 * If you need changes, follow the instructions written in the readme.md
 *
 * Generated by Herysia.
 */

using System;
using System.Collections.Generic;
using System.Text.Json;
using LostArkLogger;

namespace LostArk.Game.Messages.Structures
{
    public class ItemData
    {
        public bool valid = false;
        internal ItemData()
        {
            //Made for conditional structures
        }

        internal ItemData(BitReader reader)
        {
            valid = true;
            Unk0 = reader.ReadInt32();
            if (Unk0 > 0)
            {
                Unk0_0 = reader.ReadInt64();
                ItemId = reader.ReadInt32();
                Unk0_2 = reader.ReadInt16();
                Unk0_3 = reader.ReadInt16();
                Unk0_4 = reader.ReadInt32();
                Unk0_5 = reader.ReadInt32();
                Unk0_6 = reader.ReadInt32();
                Unk0_7 = reader.ReadSimpleInt();
                Unk0_8 = reader.ReadSimpleInt();
                Unk0_9 = reader.ReadByte();
                if (Unk0_9 == 1)
                {
                    Unk0_9_0 = reader.ReadBytes(9);
                }
                Unk0_10 = reader.ReadByte();
                Unk0_11 = reader.ReadByte();
                Unk0_12 = reader.ReadInt32();
                Unk0_13 = new OptionData(reader);
                Unk0_14 = reader.ReadInt32();
            }
        }

        public int Unk0 { get; }
        public long Unk0_0 { get; }
        public int ItemId { get; }
        public short Unk0_2 { get; }
        public short Unk0_3 { get; }
        public int Unk0_4 { get; }
        public int Unk0_5 { get; }
        public int Unk0_6 { get; }
        public ulong Unk0_7 { get; }
        public ulong Unk0_8 { get; }
        public byte Unk0_9 { get; }
        public byte[] Unk0_9_0 { get; }
        public byte Unk0_10 { get; }
        public byte Unk0_11 { get; }
        public int Unk0_12 { get; }
        public OptionData Unk0_13 { get; } = new OptionData();
        public int Unk0_14 { get; }
    }

    public class OptionData
    {
        internal OptionData()
        {
            //Made for conditional structures
        }

        internal OptionData(BitReader reader)
        {
            Unk0 = reader.ReadInt32();

            OptionDataTypes optionDataTypes = new OptionDataTypes(Unk0, reader);


            string json = JsonSerializer.Serialize(optionDataTypes, new JsonSerializerOptions() { IncludeFields = true });
            File.WriteAllText(@"C:\Users\Dominic\Downloads\necklace.json", json);
        }

        public int Unk0 { get; }

        //0 -> reads nothing more
        //1 -> complex(substructures again)
        //2 -> array of(complex (substructures again)
        //3 -> 26 bytes
        //4 -> multiple arrays
        //5 -> complex (substructures again)
        //6 -> complex (substructures again)
        //7 -> 9 bytes
    }

    public class OptionDataTypes
    {
        public int OptionDataType { get; }
        public int[] RemainingBytes { get; }


        internal OptionDataTypes(int unk0, BitReader reader)
        {
            OptionDataType = unk0;
            RemainingBytes = reader.ReadBytes(reader.BitsLeft / 8).Select(b => Convert.ToInt32(b)).ToArray();
        }
    }
}